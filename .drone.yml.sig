eyJhbGciOiJIUzI1NiJ9.LS0tCnBpcGVsaW5lOgoKIyBkcm9uZSByZXBvIG5hbWUKIyBVS0hvbWVPZmZpY2Uva3ViZXJuZXRlcy1lMmUtYmluYXJpZXMKCiMgYnVpbGQgc3RlcHMKCiAgZ2V0X2t1YmVybmV0ZXNfc291cmNlOgogICAgaW1hZ2U6IGFscGluZTozLjQKICAgIGVudmlyb25tZW50OgogICAgICAtIEtVQkVSTkVURVNfVkVSU0lPTj12MS40LjYKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayAtLXVwZGF0ZSBhZGQgZ2l0IG1ha2UgYmFzaAogICAgICAtIEtVQkVSTkVURVNfVkVSU0lPTj0ke0tVQkVSTkVURVNfVkVSU0lPTn0gbWFrZSBnZXRfa3ViZXJuZXRlc19zb3VyY2UKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWddCgogIGJ1aWxkX2t1YmVybmV0ZXNfYmluYXJpZXM6CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRVJORVRFU19WRVJTSU9OPXYxLjQuNgogICAgY29tbWFuZHM6CiAgICAgIC0gYXBrIC0tdXBkYXRlIGFkZCBiYXNoIHRhciBtYWtlCiAgICAgIC0gS1VCRVJORVRFU19WRVJTSU9OPSR7S1VCRVJORVRFU19WRVJTSU9OfSBtYWtlIGJ1aWxkX2t1YmVybmV0ZXNfYmluYXJpZXMKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWddCgogIGJ1aWxkX2ltYWdlOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVSTkVURVNfVkVSU0lPTj12MS40LjYKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayAtLXVwZGF0ZSBhZGQgZ2l0IGJhc2ggbWFrZQogICAgICAtIEtVQkVSTkVURVNfVkVSU0lPTj0ke0tVQkVSTkVURVNfVkVSU0lPTn0gbWFrZSBidWlsZF9pbWFnZQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWddCgogIGltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRVJORVRFU19WRVJTSU9OPXYxLjQuNgogICAgY29tbWFuZHM6CiAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtrdWJlcm5ldGVzX2UyZV9iaW5hcmllcyIgLXA9JHtET0NLRVJfVE9LRU59IHF1YXkuaW8KICAgIC0gZG9ja2VyIHRhZyBrdWJlcm5ldGVzLWUyZS1iaW5hcmllcyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva3ViZXJuZXRlcy1lMmUtYmluYXJpZXM6JHtLVUJFUk5FVEVTX1ZFUlNJT059LSR7RFJPTkVfQ09NTUlUX1NIQTowOjd9CiAgICAtIGRvY2tlciB0YWcga3ViZXJuZXRlcy1lMmUtYmluYXJpZXMgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2t1YmVybmV0ZXMtZTJlLWJpbmFyaWVzOiR7S1VCRVJORVRFU19WRVJTSU9OfQogICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva3ViZXJuZXRlcy1lMmUtYmluYXJpZXM6JHtLVUJFUk5FVEVTX1ZFUlNJT059LSR7RFJPTkVfQ09NTUlUX1NIQTowOjd9CiAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rdWJlcm5ldGVzLWUyZS1iaW5hcmllczoke0tVQkVSTkVURVNfVkVSU0lPTn0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBbcHVzaF0KCiAgdGFnX2ltYWdlX3RvX3F1YXk6CiAgICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgICBlbnZpcm9ubWVudDoKICAgICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIGNvbW1hbmRzOgogICAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2t1YmVybmV0ZXNfZTJlX2JpbmFyaWVzIiAtcD0ke0RPQ0tFUl9UT0tFTn0gcXVheS5pbwogICAgICAgIC0gZG9ja2VyIHRhZyBrdWJlcm5ldGVzLWUyZS1iaW5hcmllcyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva3ViZXJuZXRlcy1lMmUtYmluYXJpZXM6JHtEUk9ORV9UQUd9CiAgICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva3ViZXJuZXRlcy1lMmUtYmluYXJpZXM6JHtEUk9ORV9UQUd9CiAgICAgIHdoZW46CiAgICAgICAgZXZlbnQ6IFt0YWddCgoKIyBzdGFydCBuZWVkZWQgc2VydmljZXMKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMi1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.CxJcabreCVo3-XOTl0Piyuc__Ko5Z9nD_6fG6y3Mtg0